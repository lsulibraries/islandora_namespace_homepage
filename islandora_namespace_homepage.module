<?php

// Constants.
define('ISLANDORA_NAMESPACE_HOMEPAGE_ADMINISTER_HOMEPAGE', 'namespace administer homepages');
define('ISLANDORA_NAMESPACE_HOMEPAGE_OBJECT_MANAGEMENT_EXEMPT', 'manage objects in any namespace');
define('ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE', 'manage own namespace field');
define('ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME', 'field_namespace');

require_once 'includes/utilities.php';
require_once 'includes/namespaces.php';
require_once 'includes/db.php';
require_once 'includes/access.php';
require_once 'includes/forms.php';

/**
 * Implements hook_menu().
 */
function islandora_namespace_homepage_menu() {
  $namespace_prefixes = get_namespace_prefixes(FALSE);

  $items = array();
  foreach ($namespace_prefixes as $prefix) {
    $path = $prefix;
    $items[$path] = array(
      'page callback' => 'namespace_homepage_page',
      'page arguments' => array(0),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
      'title callback' => 'islandora_namespace_homepage_drupal_title',
      'title arguments' => array(0),
    );
    $items[$path . '/settings'] = array(
      'title' => 'Settings',
      'description' => 'Configure landing page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('admin_form', 0),
      'access callback' => 'homepage_administrator_access_callback',
      'access arguments' => array(0),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

function islandora_namespace_homepage_drupal_title($prefix) {
  return inh_title($prefix);
}

function namespace_homepage_page($namespace) {
  update_namespace_heirarchy_cache();

  $variables = array();
  $variables['namespace'] = $namespace;
  $variables['namespace_admin'] = homepage_administrator_access_callback($namespace);
  $variables['proxyAdmin'] = user_access(ISLANDORA_NAMESPACE_HOMEPAGE_OBJECT_MANAGEMENT_EXEMPT) && $variables['namespace_admin'];

  $proxied = inh_field($namespace, 'harvested') ? TRUE : FALSE;
  
  $collections = array();
  foreach (get_namespace_collections($namespace) as $pid) {
    $object = islandora_object_load($pid);
    $mods = simplexml_load_string($object['MODS']->content);
    $object->description = (string) $mods->abstract;
    $collections[$pid]['obj'] = $object;
    $collections[$pid]['url'] = "/islandora/object/" . $object->id;
    if ($proxied) {
      $proxy_url = get_link_back_for_proxy_object($object, $namespace);
      if ($proxy_url) {
        $collections[$pid]['proxy_url'] = $collections[$pid]['url'] . '/manage';
        $collections[$pid]['url'] = $proxy_url;
      }
    }
  }
  $variables['collections'] = $collections;

  $variables['child_collections_for_display'] = get_child_collections_for_display($namespace);
  $record = get_record($namespace);
  $variables['title'] = get_field_or_default('title', $record, $namespace);
  $variables['description'] = get_field_or_default('description', $record, $namespace);

  $file = isset($record->logo) ? file_load($record->logo) : FALSE;
  if ($file) {
    $file_url = file_create_url($file->uri);
    $variables['logo_href'] = $file_url;
  }

  $variables['search'] = drupal_get_form('myform', $namespace);
  $content = array();
  $content[] = array(
    '#type' => 'markup',
    '#markup' => theme('test_my_stuff', array('nsHome' => $variables)),
  );
  return $content;
}

/**
 * Implements hook_theme().
 * 
 */
function islandora_namespace_homepage_theme($existing, $type, $theme, $path) {
  return array(
    'test_my_stuff' => array(
      'variables' => array('nsHome' => array()),
      'template' => 'templates/islandora-namespace-homepage',
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * When a new collection object is ingested, check to see if the namespace
 * prefix is already cached in the variables table.
 * 
 * If not, trigger a menu_rebuild(), which will in turn call this module's
 * hook_menu() which will refresh the list of known prefixes.
 */
function islandora_namespace_homepage_islandora_object_ingested(AbstractObject $object) {
  if (in_array('islandora:collectionCModel', $object->models)) {
    $prefix = parse_pid($object->id, 'prefix');
    $cached_prefixes = variable_get('islandora_namespace_homepage_prefixes');
    if (!in_array($prefix, $cached_prefixes)) {
      menu_rebuild();
    }
  }
}

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_namespace_homepage_islandora_solr_query($islandora_solr_query) {
  // Query param 'ns' gets set on form submission so that we can use it here.
  if (!isset($_GET['ns'])) {
    return;
  }
  $namespaces = $_GET['ns'];
  $filtered_ns = array_values(array_filter($namespaces));

  if (count($filtered_ns) > 1) {
    $ns_filters = array();
    foreach ($filtered_ns as $ns) {
      $ns_filters[] = "PID:$ns";
    }

    $filter = implode(' OR ', $ns_filters);
  }
  else {
    $filter = format_string('!field:!value', array(
      '!field' => 'PID',
      '!value' => array_shift($filtered_ns),
    ));
  }
  $islandora_solr_query->solrParams['fq'][] = $filter;
}

function islandora_namespace_homepage_form_islandora_solr_advanced_search_form_alter(&$form, &$form_state) {
  $ns_array = get_all_collections_inst();
  $pruned_ns = array();
  foreach ($ns_array as $key => $value) {
    $pruned_ns[$key] = $value;
  }
  $form['namespaces'] = array(
    '#title' => 'Search within institutions',
    '#type' => 'checkboxes',
    '#options' => array_flip($pruned_ns), //array_flip(get_all_collections_inst()), //unserialize(file_get_contents('cache_file')),
    '#weight' => 5,
  );
  $form['controls']['#weight'] = 6;
  // Gives us a chance to add 'ns' to the URL for use in altering the query (above).
  $form['#submit'][] = 'islandora_namespace_homepage_append_ns';
}

function islandora_namespace_homepage_append_ns($form, &$form_state) {

  // Set the 'ns' query param to be fetched later from $_GET.
  $ns_selected = array_filter($form_state['values']['namespaces']);

  if (count($ns_selected) > 0) {
    $form_state['redirect'][1]['query']['ns'] = $ns_selected;
  }
}

/**
 * Implements hook_permission().
 */
function islandora_namespace_homepage_permission() {
  return array(
    ISLANDORA_NAMESPACE_HOMEPAGE_ADMINISTER_HOMEPAGE => array(
      'title' => t('Administer namespace homepages.'),
      'description' => t('Administer namespace homepages associated with your user profile.'),
    ),
    ISLANDORA_NAMESPACE_HOMEPAGE_OBJECT_MANAGEMENT_EXEMPT => array(
      'title' => t('manage objects in any namespace'),
      'description' => t("Exemption from islandora object management namespace restrictions."),
    ),
    ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE => array(
      'title' => t('Manage own namespace association.'),
      'description' => t("Set and modify user namespace associations."),
    ),
  );
}

function islandora_namespace_homepage_user_login_submit($form, &$form_state) {
  $list = get_user_whitelist($form_state['uid']);
  if (empty($list) | !is_array($list)) {
    return;
  }

  $_GET['destination'] = $list[0];
  drupal_goto($list[0]);
}

function islandora_namespace_homepage_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'islandora_namespace_homepage_user_login_submit';
}

/**
 * Implements hook_islandora_object_access
 * 
 * @param type $op
 * @param type $object
 * @param type $user
 * @return TRUE|FALSE|NULL
 */
function islandora_namespace_homepage_islandora_object_access($op, $object, $user) {
  return decide_access($user, $object, $op);
}

/**
 * Implements hook_islandora_datastream_access
 *
 * @param type $op
 * @param type $object
 * @param type $user
 * @return TRUE|FALSE|NULL
 */
function islandora_namespace_homepage_islandora_datastream_access($op, $object, $user) {
  return decide_access($user, $object->parent, $op);
}

function islandora_namespace_homepage_edit_islandora_object_ip_embargo($object) {
  global $user;
  $access = decide_access($user, $object, 'ip_embargo');
  return $access;
}

function islandora_namespace_homepage_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME && $op == 'edit') {
    return user_access(ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE);
  }
  return TRUE;
}

/**
 * 
 * @param type $user
 * @return array
 */
function get_user_namespaces($uid) {
  $account = user_load($uid);
  $field_name = ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME;
  $field_items = field_get_items('user', $account, $field_name);

  if (!$field_items) {
    return array();
  }
  $namespaces = array();
  foreach ($field_items as $item) {
    $namespaces[] = $item['safe_value'];
  }
  return $namespaces;
}

function islandora_namespace_homepage_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id != 'islandora_basic_collection_create_child_collection_form') {
    return;
  }
  $user = user_uid_optional_load();
  $form['policy']['namespace']['#access'] = FALSE;
  $user_namespace = $user->field_namespace;
  //if user has no namespace restrictons
  if (empty($user_namespace)) {
    $input_choice = 'textfield';
    $options_or_default = '#default_value';
    $default_namespace = 'islandora';
    $inst_ns_description = "You have no namespace associated with your user account. Please provide an institutional prefix that matches this collection's owner";
    $user_namespace_options = $default_namespace;
  }
  //otherwise the user has one or more namespaces
  else {
    if (count($user_namespace['und']) >= 1) {
      $input_choice = 'select';
      $options_or_default = '#options';
      $inst_ns_description = "choose an institutional prefix for the namespace of this collection.";
      $user_namespace_options = array();
      foreach ($user_namespace['und'] as $key => $value) {
        $user_namespace_options[$value['value']] = $value['value'];
      }
    }
  }

  $form['next']['#weight'] = 1;
  $form['pid']['#access'] = FALSE;
  $form['pid']['#element_validate'][] = 'collection_namespace_helper_validate';
  $form['institution-prefix'] = array(
    '#type' => $input_choice,
    '#title' => t('Collection PID Prefix (Unique to Institution)'),
    '#description' => t($inst_ns_description),
    $options_or_default => $user_namespace_options,
  );
  $form['collection-alias'] = array(
    '#type' => 'textfield',
    '#description' => t("Enter a Collection alias, as part of this collection's PID"),
    '#title' => t('Collection Alias (Unique to collection)'),
  );

  $form['#validate'][] = 'collection_namespace_helper_validate';

  $form_state['validate_handlers'][] = 'collection_namespace_helper_validate';
}

function collection_namespace_helper_validate($form, &$form_state) {
  $form_state['values']['pid'] = $form_state['values']['institution-prefix'] . '-' . $form_state['values']['collection-alias'] . ':collection';
  $form_state['values']['namespace'] = substr($form_state['values']['pid'], 0, strpos($form_state['values']['pid'], ':'));
}

/**
 * Prepares variables for islandora_solr templates.
 *
 * Default template: theme/islandora-solr.tpl.php.
 */
function islandora_namespace_homepage_preprocess_islandora_solr(&$variables) {
  $prefix_harvested_map = array();
  foreach ($variables['results'] as $key => $result) {
    $pid = $result['PID'];
    $prefix = parse_pid($pid, 'prefix');
    if (!$prefix) {
      continue;
    }

    $caching_needed = $prefix && !array_key_exists($prefix, $prefix_harvested_map);
    // Update the local cache of prefix data.
    if ($caching_needed) {
      $row = inh_table($prefix, array('harvested_regex'));
      if (FALSE === $row || !isset($row->harvested_regex)) {
        continue;
      }

      $regex = empty($row) ? FALSE : $row->harvested_regex;
      $prefix_harvested_map[$prefix] = $regex;
    }

    if ($prefix && $prefix_harvested_map[$prefix]) {
      $object = islandora_object_load($pid);
      if (!$object) {
        continue;
      }
      $mods = $object['MODS'];
      $modsxml = simplexml_load_string($mods->content);
      $pattern = sprintf('/%s/', $prefix_harvested_map[$prefix]);

      foreach ($modsxml->abstract as $abstract) {
        $matches = array();
        preg_match($pattern, $abstract, $matches);
        if (isset($matches[1])) {
          $link_back = $matches[1];
          $thumbnail_xml = simplexml_load_string($result['thumbnail'], "SimpleXMLElement", LIBXML_NOXMLDECL);
          if (!$thumbnail_xml) {
            break;
          }
          $thumbnail_xml['href'] = $link_back;
          $domdoc = new DOMDocument();
          $domdoc->loadXML($thumbnail_xml->asXML());
          $thumb = $domdoc->saveXML($domdoc->documentElement);
          $variables['results'][$key]['thumbnail'] = $thumb;

          $title_xml = simplexml_load_string($result['solr_doc']['dc.title']['value']);
          if(!$title_xml) {
            break;
          }
          $title_xml['href'] = $link_back;
          $domdoc = new DOMDocument();
          $domdoc->loadXML($title_xml->asXML());
          $title_href = $domdoc->saveXML($domdoc->documentElement);
          $variables['results'][$key]['solr_doc']['dc.title']['value'] = $title_href;
          break;
        }
      }
    }
  }
}

function islandora_namespace_homepage_islandora_breadcrumbs_alter(&$breadcrumbs, $context, $object) {
  if (!$object) {
    return;
  }
  $prefix = parse_pid($object->id, 'prefix');
  $title = inh_title($prefix);
  $prefix_home = "<a href='/$prefix'>$title</a>";
  foreach ($breadcrumbs as $key => $b) {
    $xml = simplexml_load_string($b);
    $href = (string)$xml['href'];
    if ($href == '/islandora') {
      $breadcrumbs[$key] = $prefix_home;
    }
  }
}
