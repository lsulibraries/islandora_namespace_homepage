<?php

/**
 * 
 * @return string
 * The namespace of this module.
 */
function dplns() {
  return 'islandora_namespace_homepage';
}

function vg($key) {
  return variable_get(dplns() . '_' . $key, FALSE);
}

function vs($key, $val) {
  return variable_set(dplns() . '_' . $key, $val);
}

/**
 * Implements hook_menu.
 */
function islandora_namespace_homepage_menu() {
  $namespace_prefixes = get_namespace_prefixes(FALSE);

  $items = array();
  foreach ($namespace_prefixes as $prefix) {
    $path = $prefix;
    $items[$path] = array(
      'page callback' => 'namespace_homepage_page',
      'page arguments' => array(0),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[$path . '/admin'] = array(
      'title' => 'Islandora URL Redirector',
      'description' => 'Configure Islandora URL Redirector.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('admin_form', 0),
      'access arguments' => array('Create child collections'),
//      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

function get_namespace_prefixes($cache = TRUE) {
  $prefixes_cache_value = vg('prefixes');

  // Use a stored value when appropriate.
  if (!$cache || !$prefixes_cache_value) {
    return update_namespace_prefixes_cache();
  }
  return $prefixes_cache_value;
}

function update_namespace_prefixes_cache() {
  $namespace_prefixes = array();
  foreach (array_keys(islandora_basic_collection_get_collections()) as $collection) {
    $prefix = parse_pid($collection, 'prefix');
    if (!$prefix) {
      continue;
    }
    $namespace_prefixes[] = $prefix;
  }
  $prefixes = array_unique(array_values($namespace_prefixes));

  vs('prefixes', $prefixes);

  return $prefixes;
}

function parse_pid($pid, $filter = NULL) {
  $parts = explode(':', $pid);
  $suffix = $parts[1];
  $prefix_parts = explode('-', $parts[0]);
  $num_parts = count($prefix_parts);
  if ($num_parts <= 1) {
    return FALSE;
  }
  $alias = array_pop($prefix_parts);
  $prefix = implode('-', $prefix_parts);

  switch ($filter) {
    case('pid'):
      return $pid;

    case('prefix'):
      return $prefix;

    case('alias'):
      return $alias;

    case('suffix'):
      return $suffix;

    case('namespace'):
      return $prefix . '-' . $alias;

    default:
      return array($prefix, $alias, $suffix);
  }
}

function namespace_homepage_page($namespace) {
  update_namespace_heirarchy_cache();
  $variables = array();
  $variables['namespace'] = $namespace;

  $collections = array();
  foreach (get_namespace_collections($namespace) as $pid) {
    $object = islandora_object_load($pid);
    $mods = simplexml_load_string($object['MODS']->content);
    $object->description = (string) $mods->abstract;
    $collections[$pid] = $object;
  }
  $variables['collections'] = $collections;

  $variables['child_collections_for_display'] = get_child_collections_for_display($namespace);
  $record = get_record($namespace);
  $variables['title'] = get_field_or_default('title', $record);
  $variables['description'] = get_field_or_default('description', $record);

  $file = isset($record->logo) ? file_load($record->logo) : FALSE;
  if ($file) {
    $file_url = file_create_url($file->uri);
    $variables['logo_href'] = $file_url;
  }

  $variables['search'] = drupal_get_form('myform', $namespace);
  $content = array();
  $content[] = array(
    '#type' => 'markup',
    '#markup' => theme('test_my_stuff', array('nsHome' => $variables)),
  );
  return $content;
}

function myform($form, &$form_state, $namespace) {
  $form = array();
  $form['term'] = array(
    '#type' => 'textfield',
    '#title' => "Search",
  );
  $form['namespace'] = array(
    '#title' => 'Search within institutions',
    '#type' => 'hidden',
    '#value' => $namespace,
    '#weight' => 5,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('myform_handle'),
  );
  return $form;
}

function myform_handle($form, &$form_state) {
  $namespace = $form_state['values']['namespace'];
  $child_ns  = get_namespace_children($namespace);
  $namespaces = array($namespace . '*');
  foreach ($child_ns as $child) {
    $namespaces[] = $child . '*';
  }
  // See islandora_solr/includes/blocks.inc
  $search_string = islandora_solr_replace_slashes($form_state['values']['term']);
  $query = array('type' => 'dismax', 'ns' => $namespaces);

  $form_state['redirect'] = array(
    ISLANDORA_SOLR_SEARCH_PATH . "/$search_string",
    array(
      'query' => $query,
    ),
  );
}

function get_field_or_default($key, $record) {
  return isset($record->$key) ? $record->$key : "No value set for $key";
}

/**
 * Get the pids for a given ns prefix and optionally, child prefixes.
 * 
 * @param type $target_prefix
 * 
 * @param type $recurse
 * @return type
 */
function get_namespace_collections($target_prefix, $recurse = FALSE) {
  $heirarchy = get_namespace_subtree($target_prefix);
  $collections = get_collections_from_heirarchy($heirarchy, $target_prefix, $recurse);
  return $collections;
}

function get_namespace_subtree($namespace) {
  $heirarchy = vg('heirarchy');
  $steps = explode('-', $namespace);
  $key = '';
  while (!empty($steps)) {
    $step = array_shift($steps);
    $key = $key ? $key . '-' . $step : $step;
    $heirarchy = $heirarchy[$key];
  }
  return $heirarchy;
}

function get_collections_from_heirarchy($heirarchy, $key, $recurse = FALSE) {
  $collections = array();
  foreach ($heirarchy as $name => $value) {
    if ($name == 'collections') {
      $collections += (array) $value;
    }
    elseif ($recurse) {
      $new_key = $key . '-' . $name;
      $collections[$new_key] = array_merge($collections, get_collections_from_heirarchy($heirarchy[$name], $new_key, $recurse));
    }
  }
  return $collections;
}

function get_child_collections_for_display($namespace) {
  $child_ns = get_namespace_children($namespace);
  $child_collections = array();
  foreach ($child_ns as $ns) {
    $child_collections[$ns] = array('collections' => get_namespace_collections($ns));
    $child_collections[$ns]['title'] = inh_title($ns);
  }

  return $child_collections;
}

function get_namespace_children($namespace) {
  $subtree = get_namespace_subtree($namespace);
  unset($subtree['collections']);
  return array_keys($subtree);
}

function update_namespace_heirarchy_cache($namespace = 'all') {
  $ns = function($pid) {
    return parse_pid($pid, 'pid');
  };
  $collections = array_filter(array_map($ns, array_keys(islandora_basic_collection_get_collections())));
  $heirarchy = array();
  foreach ($collections as $collection) {
    $branch_segments = explode('-', $collection);
    $branch = flat_to_nest($branch_segments);
    $heirarchy = array_merge_recursive($heirarchy, $branch);
  }
  vs('heirarchy', $heirarchy);
}

function collection_is_in_namespace($pid, $namespace, $consider_children = FALSE) {
  $pfx = parse_pid($pid, 'prefix');
  return $consider_children ? preg_match("/^$namespace/", $pfx) : $pfx == $namespace;
}

function flat_to_nest($flat, $prefix = '') {
  $first = array_shift($flat);
  $nest = array();
  if (empty($flat)) {
    $pid = $prefix . '-' . $first;
    return array('collections' => $pid);
  }
  else {
    $prefix = strlen($prefix) ? $prefix . '-' . $first : $first;
    $nest[$prefix] = flat_to_nest($flat, $prefix);
    return $nest;
  }
}

/**
 * Implements hook_theme().
 * 
 */
function islandora_namespace_homepage_theme($existing, $type, $theme, $path) {
  return array(
    'test_my_stuff' => array(
      'variables' => array('nsHome' => array()),
      'template' => 'templates/islandora-namespace-homepage',
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * When a new collection object is ingested, check to see if the namespace
 * prefix is already cached in the variables table.
 * 
 * If not, trigger a menu_rebuild(), which will in turn call this module's
 * hook_menu() which will refresh the list of known prefixes.
 */
function islandora_namespace_homepage_islandora_object_ingested(AbstractObject $object) {
  if (in_array('islandora:collectionCModel', $object->models)) {
    $prefix = parse_pid($object->id, 'prefix');
    $cached_prefixes = variable_get('islandora_namespace_homepage_prefixes');
    if (!in_array($prefix, $cached_prefixes)) {
      menu_rebuild();
    }
  }
}

function get_record($prefix) {
  $tbl = dplns();
  $query = "SELECT id, prefix, title, description, logo from {$tbl} WHERE prefix = :p";
  $args = array(':p' => $prefix);
  $record = db_query($query, $args);
  return $record->fetchObject();
}

function admin_form($form, &$form_state, $ns) {
  $title_field = "{$ns}_title";
  $descr_field = "{$ns}_description";
  $logo_field = "{$ns}_logo";
  $dplns = dplns();
  $tbl_prefix = $dplns . "_";

  $data = get_record($ns);
  $defval = function($key) use ($data) {
    return isset($data->$key) ? $data->$key : '';
  };
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => "Full title for namespace '$ns'",
    '#default_value' => $defval('title'),
  );
  $form['description'] = array(
    '#type' => 'text_format',
    '#title' => "Description for namespace '$ns'",
    '#default_value' => $defval('description'),
  );
  $form['logo'] = array(
    '#type' => 'managed_file',
    '#title' => t('Logo'),
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),
    '#default_value' => $defval('logo'),
    '#upload_location' => 'public://namespace-thumbs/',
  );
  $form["ns"] = array(
    '#type' => 'hidden',
    '#value' => $ns,
  );
  $form["submit"] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );
  return $form;
}

function islandora_namespace_homepage_admin_form() {
  
}

function admin_form_submit($form, &$form_state) {

  $v = $form_state['values'];
  $mod = dplns();
  $p = $mod . '_';
  $ns = $v['ns'];

  $exists = get_record($ns);
  $record = $exists ? $exists : new stdClass();

  $title_key = "title";
  $descr_key = "description";
  $logo_key = "logo";

  if ($form_state['values'][$logo_key]) {
    // Load the file via file.fid.
    $file = file_load($form_state['values'][$logo_key]);

    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;

    // Save.
    $file = file_save($file);
  }

  $record->$title_key = $v[$title_key];
  $record->$descr_key = $v[$descr_key]['value'];
  $record->$logo_key = isset($file->fid) ? $file->fid : NULL;

  if (!$exists) {
    $record->prefix = $ns;
    $record->id = db_insert($mod)
        ->fields((array) $record)
        ->execute();
  }
  else {
    $record->id = db_update($mod)
        ->fields((array) $record)
        ->condition('prefix', $record->prefix, '=')
        ->execute();
  }

  // Record that the module (in this example, user module) is using the file. 
  if (isset($file)) {
    file_usage_add($file, $mod, $mod, $record->id);
  }
}

function inh_table($key, $fields = array()) {
  $keyfield = is_numeric($key) ? 'id' : 'prefix';
//  $field = $field ? $field : '*';
  $result = db_select('islandora_namespace_homepage', 'inh')
  ->fields('inh', $fields)
  ->condition($keyfield, $key)
  ->execute();
  return $result->fetchObject();
}

function inh_title($namespace) {
  $row = inh_table($namespace, array('title'));
  if (!$row) {
    return "No Title set for $namespace.";
  }
  return $row->title;
}

function islandora_namespace_homepage_islandora_solr_query($islandora_solr_query) {
  // Query param 'ns' gets set on form submission so that we can use it here.
  if(!isset($_GET['ns'])){
    return;
  }
  $namespaces = $_GET['ns'];
  $filtered_ns = array_values(array_filter($namespaces));

  if (count($filtered_ns) > 1) {
    $ns_filters = array();
    foreach ($filtered_ns as $ns) {
      $ns_filters[] = "PID:$ns";
    }

    $filter = implode(' OR ', $ns_filters);
  } else {
    $filter = format_string('!field:!value', array(
      '!field' => 'PID',
      '!value' => array_shift($filtered_ns),
    ));
  }
  $islandora_solr_query->solrParams['fq'][] = $filter;
}

function islandora_namespace_homepage_form_islandora_solr_advanced_search_form_alter(&$form, &$form_state) {
  $ns_array = get_all_collections_inst();
  $pruned_ns = array();
  foreach($ns_array as $key => $value){
    $pruned_ns[$key] = $value;
  }
  $form['namespaces'] = array(
    '#title' => 'Search within institutions',
    '#type' => 'checkboxes',
    '#options' => array_flip($pruned_ns), //array_flip(get_all_collections_inst()), //unserialize(file_get_contents('cache_file')),
    '#weight' => 5,
  );
  $form['controls']['#weight'] = 6;
  // Gives us a chance to add 'ns' to the URL for use in altering the query (above).
  $form['#submit'][] = 'islandora_namespace_homepage_append_ns';
}




function islandora_namespace_homepage_append_ns($form, &$form_state) {

  // Set the 'ns' query param to be fetched later from $_GET.
  $ns_selected = array_filter($form_state['values']['namespaces']);

  if (count($ns_selected) > 0) {
    $form_state['redirect'][1]['query']['ns'] = $ns_selected;
  }
}

function get_all_collections_inst(){
  $connection = islandora_get_tuque_connection();
  if ($connection) {
    $query = <<<EOQ
  SELECT ?pid FROM <#ri>
  WHERE { 
    ?pid <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:root>
  }
EOQ;
 $results = $connection->repository->ri->sparqlQuery($query);
  }
  $objects = array();
 foreach($results as $key => $value){
   $plode = explode('-', $results[$key]['pid']['value']);
   $objects[$plode[0]] =  $plode[0] . '*';
 }
 //$objects['all'] = '*';
 return array_unique($objects);
}
