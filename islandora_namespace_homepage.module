<?php

/**
 * 
 * @return string
 * The namespace of this module.
 */
function dplns() {
  return 'islandora_namespace_homepage';
}

/**
 * Implements hook_menu.
 */
function islandora_namespace_homepage_menu() {
  $namespace_prefixes = get_all_namespace_prefixes(FALSE);
  variable_set('islandora_namespace_homepage_prefixes', $namespace_prefixes);
  $items = array();
  foreach ($namespace_prefixes as $prefix) {
    $path = $prefix;
    $items[$path] = array(
      'page callback' => 'namespace_homepage_page',
      'page arguments' => array(0),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[$path . '/admin'] = array(
      'title' => 'Islandora URL Redirector',
      'description' => 'Configure Islandora URL Redirector.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('admin_form', 0),
      'access arguments' => array('Create child collections'),
//      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

function get_all_namespace_prefixes($cache = TRUE) {
  // Use a stored value when appropriate.
  if ($cache) {
    $cache_key = dplns() . '_prefixes';
    return variable_get($cache_key);
  }

  $namespace_prefixes = array();
  foreach (array_keys(islandora_basic_collection_get_collections()) as $collection) {
    $prefix = parse_pid_for_prefix($collection);
    if (!$prefix) {
      continue;
    }
    $namespace_prefixes[] = $prefix;
  }

  return array_unique($namespace_prefixes);
}

function parse_pid_for_prefix($pid) {
  $parts = explode('-', $pid);
  $num_parts = count($parts);
  if ($num_parts <= 1) {
    return FALSE;
  }
  elseif ($num_parts == 2) {
    return $parts[0];
  }
  else {
    // Remove alias + ':collection'.
    array_pop($parts);
    $prefix = implode('-', $parts);
    return $prefix;
  }
}

function namespace_homepage_page($namespace) {
  $variables = array();
  $variables['namespace'] = $namespace;

  $collections = array();
  foreach (get_namespace_collections($namespace, TRUE) as $pid) {
    $object = islandora_object_load($pid);
    $mods = simplexml_load_string($object['MODS']->content);
    $object->description = (string) $mods->abstract;
    $collections[$pid] = $object;
  }
  $variables['collections'] = $collections;

  $record = get_record($namespace);
  $variables['title'] = get_field_or_default('title', $record);
  $variables['description'] = get_field_or_default('description', $record);

  $file = isset($record->logo) ? file_load($record->logo) : FALSE;
  if ($file) {
    $file_url = file_create_url($file->uri);
    $variables['logo_href'] = $file_url;
  }

  $variables['search'] = drupal_get_form('myform');
  $content = array();
  $content[] = array(
    '#type' => 'markup',
    '#markup' => theme('test_my_stuff', array('nsHome' => $variables)),
  );
  return $content;
}

function myform() {
  $form = array();
  $form['term'] = array(
    '#type' => 'textfield',
    '#title' => "Search",
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('myform_handle'),
  );
  return $form;
}

function myform_handle($form, &$form_state) {
  $term = $form_state['values']['term'];
  $query = array('type' => 'edismax');
  $query['fq'] = 'lsu';
  drupal_goto('islandora/search/' . $term, array('query' => $query));
}

function get_field_or_default($key, $record) {
  return isset($record->$key) ? $record->$key : "No value set for $key";
}

function islandora_namespace_homepage_islandora_solr_query($islandora_solr_query) {
  // Query param 'ns' gets set on form submission so that we can use it here.
  if (!isset($_GET['ns'])) {
    return;
  }
  // Account for multiple namespaces: foreach ($names as $spaces) { //create filter, add to solrParams}
  $namespaces = $_GET['ns'];

  $filter = format_string('!field:!value', array(
    '!field' => 'PID',
    '!value' => $namespaces,
  ));
  $islandora_solr_query->solrParams['fq'][] = $filter;
}

/**
 * Get the pids for a given ns prefix and optionally, child prefixes.
 * 
 * @param type $target_prefix
 * 
 * @param type $children
 * @return type
 */
function get_namespace_collections($target_prefix, $children = FALSE) {
  $all_pids = array_keys(islandora_basic_collection_get_collections());

  $filter = function($pid) use ($target_prefix, $children) {
    $pfx = parse_pid_for_prefix($pid);
    return $children ? preg_match("/^$target_prefix/", $pfx) : $pfx == $target_prefix;
  };

  $namespace_pids = array_filter($all_pids, $filter);
  return $namespace_pids;
}

/**
 * Implements hook_theme().
 * 
 */
function islandora_namespace_homepage_theme($existing, $type, $theme, $path) {
  return array(
    'test_my_stuff' => array(
      'variables' => array('nsHome' => array()),
      'template' => 'templates/islandora-namespace-homepage',
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * When a new collection object is ingested, check to see if the namespace
 * prefix is already cached in the variables table.
 * 
 * If not, trigger a menu_rebuild(), which will in turn call this module's
 * hook_menu() which will refresh the list of known prefixes.
 */
function islandora_namespace_homepage_islandora_object_ingested(AbstractObject $object) {
  if (in_array('islandora:collectionCModel', $object->models)) {
    $prefix = parse_pid_for_prefix($object->id);
    $cached_prefixes = variable_get('islandora_namespace_homepage_prefixes');
    if (!in_array($prefix, $cached_prefixes)) {
      menu_rebuild();
    }
  }
}

function get_record($prefix) {
  $tbl = dplns();
  $query = "SELECT id, prefix, title, description, logo from {$tbl} WHERE prefix = :p";
  $args = array(':p' => $prefix);
  $record = db_query($query, $args);
  return $record->fetchObject();
}

function admin_form($form, &$form_state, $ns) {
  $title_field = "{$ns}_title";
  $descr_field = "{$ns}_description";
  $logo_field = "{$ns}_logo";
  $dplns = dplns();
  $tbl_prefix = $dplns . "_";

  $data = get_record($ns);
  $defval = function($key) use ($data) {
    return isset($data->$key) ? $data->$key : '';
  };
  $form = array();
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => "Full title for namespace '$ns'",
    '#default_value' => $defval('title'),
  );
  $form['description'] = array(
    '#type' => 'text_format',
    '#title' => "Description for namespace '$ns'",
    '#default_value' => $defval('description'),
  );
  $form['logo'] = array(
    '#type' => 'managed_file',
    '#title' => t('Logo'),
    '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'),
    '#default_value' => $defval('logo'),
    '#upload_location' => 'public://namespace-thumbs/',
  );
  $form["ns"] = array(
    '#type' => 'hidden',
    '#value' => $ns,
  );
  $form["submit"] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );
  return $form;
}

function islandora_namespace_homepage_admin_form() {
  
}

function admin_form_submit($form, &$form_state) {

  $v = $form_state['values'];
  $mod = dplns();
  $p = $mod . '_';
  $ns = $v['ns'];

  $exists = get_record($ns);
  $record = $exists ? $exists : new stdClass();

  $title_key = "title";
  $descr_key = "description";
  $logo_key = "logo";

  if ($form_state['values'][$logo_key]) {
    // Load the file via file.fid.
    $file = file_load($form_state['values'][$logo_key]);

    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;

    // Save.
    $file = file_save($file);
  }

  $record->$title_key = $v[$title_key];
  $record->$descr_key = $v[$descr_key]['value'];
  $record->$logo_key = isset($file->fid) ? $file->fid : NULL;

  if (!$exists) {
    $record->prefix = $ns;
    $record->id = db_insert($mod)
        ->fields((array) $record)
        ->execute();
  }
  else {
    $record->id = db_update($mod)
        ->fields((array) $record)
        ->condition('prefix', $record->prefix, '=')
        ->execute();
  }

  // Record that the module (in this example, user module) is using the file. 
  if (isset($file)) {
    file_usage_add($file, $mod, $mod, $record->id);
  }
}
