<?php

// Constants.
define('ISLANDORA_NAMESPACE_HOMEPAGE_ADMINISTER_HOMEPAGE', 'namespace administer homepages');
define('ISLANDORA_NAMESPACE_HOMEPAGE_OBJECT_MANAGEMENT_EXEMPT', 'manage objects in any namespace');
define('ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE', 'manage own namespace field');
define('ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME', 'field_namespace');

require_once 'includes/utilities.php';
require_once 'includes/namespaces.php';
require_once 'includes/db.php';
require_once 'includes/access.php';
require_once 'includes/forms.php';

/**
 * Implements hook_menu().
 */
function islandora_namespace_homepage_menu() {
  $namespace_prefixes = get_namespace_prefixes(FALSE);

  $items = array();
  foreach ($namespace_prefixes as $prefix) {
    $path = $prefix;
    $items[$path] = array(
      'page callback' => 'namespace_homepage_page',
      'page arguments' => array(0),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );
    $items[$path . '/admin'] = array(
      'title' => 'admin',
      'description' => 'Configure landing page.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('admin_form', 0),
      'access callback' => 'homepage_administrator_access_callback',
      'access arguments' => array(0),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

function namespace_homepage_page($namespace) {
  update_namespace_heirarchy_cache();
  $variables = array();
  $variables['namespace'] = $namespace;

  $collections = array();
  foreach (get_namespace_collections($namespace) as $pid) {
    $object = islandora_object_load($pid);
    $mods = simplexml_load_string($object['MODS']->content);
    $object->description = (string) $mods->abstract;
    $collections[$pid] = $object;
  }
  $variables['collections'] = $collections;

  $variables['child_collections_for_display'] = get_child_collections_for_display($namespace);
  $record = get_record($namespace);
  $variables['title'] = get_field_or_default('title', $record);
  $variables['description'] = get_field_or_default('description', $record);

  $file = isset($record->logo) ? file_load($record->logo) : FALSE;
  if ($file) {
    $file_url = file_create_url($file->uri);
    $variables['logo_href'] = $file_url;
  }

  $variables['search'] = drupal_get_form('myform', $namespace);
  $content = array();
  $content[] = array(
    '#type' => 'markup',
    '#markup' => theme('test_my_stuff', array('nsHome' => $variables)),
  );
  return $content;
}

/**
 * Implements hook_theme().
 * 
 */
function islandora_namespace_homepage_theme($existing, $type, $theme, $path) {
  return array(
    'test_my_stuff' => array(
      'variables' => array('nsHome' => array()),
      'template' => 'templates/islandora-namespace-homepage',
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 *
 * When a new collection object is ingested, check to see if the namespace
 * prefix is already cached in the variables table.
 * 
 * If not, trigger a menu_rebuild(), which will in turn call this module's
 * hook_menu() which will refresh the list of known prefixes.
 */
function islandora_namespace_homepage_islandora_object_ingested(AbstractObject $object) {
  if (in_array('islandora:collectionCModel', $object->models)) {
    $prefix = parse_pid($object->id, 'prefix');
    $cached_prefixes = variable_get('islandora_namespace_homepage_prefixes');
    if (!in_array($prefix, $cached_prefixes)) {
      menu_rebuild();
    }
  }
}

/**
 * Implements hook_islandora_solr_query().
 */
function islandora_namespace_homepage_islandora_solr_query($islandora_solr_query) {
  // Query param 'ns' gets set on form submission so that we can use it here.
  if (!isset($_GET['ns'])) {
    return;
  }
  $namespaces = $_GET['ns'];
  $filtered_ns = array_values(array_filter($namespaces));

  if (count($filtered_ns) > 1) {
    $ns_filters = array();
    foreach ($filtered_ns as $ns) {
      $ns_filters[] = "PID:$ns";
    }

    $filter = implode(' OR ', $ns_filters);
  }
  else {
    $filter = format_string('!field:!value', array(
      '!field' => 'PID',
      '!value' => array_shift($filtered_ns),
    ));
  }
  $islandora_solr_query->solrParams['fq'][] = $filter;
}

function islandora_namespace_homepage_form_islandora_solr_advanced_search_form_alter(&$form, &$form_state) {
  $ns_array = get_all_collections_inst();
  $pruned_ns = array();
  foreach ($ns_array as $key => $value) {
    $pruned_ns[$key] = $value;
  }
  $form['namespaces'] = array(
    '#title' => 'Search within institutions',
    '#type' => 'checkboxes',
    '#options' => array_flip($pruned_ns), //array_flip(get_all_collections_inst()), //unserialize(file_get_contents('cache_file')),
    '#weight' => 5,
  );
  $form['controls']['#weight'] = 6;
  // Gives us a chance to add 'ns' to the URL for use in altering the query (above).
  $form['#submit'][] = 'islandora_namespace_homepage_append_ns';
}

function islandora_namespace_homepage_append_ns($form, &$form_state) {

  // Set the 'ns' query param to be fetched later from $_GET.
  $ns_selected = array_filter($form_state['values']['namespaces']);

  if (count($ns_selected) > 0) {
    $form_state['redirect'][1]['query']['ns'] = $ns_selected;
  }
}

/**
 * Implements hook_permission().
 */
function islandora_namespace_homepage_permission() {
  return array(
    ISLANDORA_NAMESPACE_HOMEPAGE_ADMINISTER_HOMEPAGE => array(
      'title' => t('Administer namespace homepages.'),
      'description' => t('Administer namespace homepages associated with your user profile.'),
    ),
    ISLANDORA_NAMESPACE_HOMEPAGE_OBJECT_MANAGEMENT_EXEMPT => array(
      'title' => t('manage objects in any namespace'),
      'description' => t("Exemption from islandora object management namespace restrictions."),
    ),
    ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE => array(
      'title' => t('Manage own namespace association.'),
      'description' => t("Set and modify user namespace associations."),
    ),
  );
}

function islandora_namespace_homepage_user_login_submit($form, &$form_state) {
  $list = get_user_whitelist($form_state['uid']);
  if(empty($list) | !is_array($list)){
    return;
  }

  $_GET['destination'] = $list[0] . '/admin';
  drupal_goto($list[0]);
}

function islandora_namespace_homepage_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'islandora_namespace_homepage_user_login_submit';
}


/**
 * Implements hook_islandora_object_access
 * 
 * @param type $op
 * @param type $object
 * @param type $user
 * @return TRUE|FALSE|NULL
 */
function islandora_namespace_homepage_islandora_object_access($op, $object, $user) {
  return decide_access($user, $object, $op);
}

/**
 * Implements hook_islandora_datastream_access
 *
 * @param type $op
 * @param type $object
 * @param type $user
 * @return TRUE|FALSE|NULL
 */
function islandora_namespace_homepage_islandora_datastream_access($op, $object, $user) {
  return decide_access($user, $object->parent, $op);
}

function islandora_namespace_homepage_edit_islandora_object_ip_embargo($object) {
  global $user;
  $access = decide_access($user, $object, 'ip_embargo');
  return $access;
}

function islandora_namespace_homepage_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME && $op == 'edit') {
    return user_access(ISLANDORA_NAMESPACE_HOMEPAGE_MANAGE_OWN_NAMESPACE);
  }
  return TRUE;
}

/**
 * 
 * @param type $user
 * @return array
 */
function get_user_namespaces($uid) {
  $account     = user_load($uid);
  $field_name  = ISLANDORA_NAMESPACE_HOMEPAGE_USER_NAMESPACE_FIELD_NAME;
  $field_items = field_get_items('user', $account, $field_name);

  if (!$field_items) {
    return array();
  }
  $namespaces = array();
  foreach ($field_items as $item) {
    $namespaces[] = $item['safe_value'];
  }
  return $namespaces;
}